#version 330

in vec3 view_Half;
in vec3 view_Normal;
in vec3 view_lightDir;

struct PointLight
{
vec3 pos;
vec3 color;
};
uniform PointLight light;
struct Material
{
vec3 kd;
vec3 ks;
float shininess;
};

uniform Material material;
layout(location=0) out vec4 out_color;

void main()
{
vec3 N = normalize(view_Normal);
vec3 H = normalize(view_Half);
vec3 L = normalize(view_lightDir);
float diffuse = max(0, dot(N,L));
float specular = pow(max (0,dot (H,N)), material.shininess);

vec3 color = light.color*diffuse*(material.kd+material.ks*specular);

color = color / (color + vec3(1.0));
color = pow(color, vec3(1.0/2.2));

out_color = vec4(color, 1.0);
}
